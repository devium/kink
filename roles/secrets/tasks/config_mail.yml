- name: Check if Postfix accounts already exist (does not check for changes!)
  stat:
    path: "{{ app_config.mailserver.vault_files.accounts }}"
  register: postfix_stat_result
  tags:
    - config-mail

- name: Check if DKIM keys already exist
  stat:
    path: "{{ app_config.mailserver.vault_files.key }}"
  register: dkim_stat_result
  tags:
    - config-mail

- name: Generate accounts and DKIM keys
  block:
  - name: Create temporary directory for mail configuration
    file:
      path: "{{ playbook_dir }}/.tmp"
      state: directory

  - name: Download docker-mailserver setup script
    get_url:
      url: "https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/v{{ app_config.mailserver.version }}/setup.sh"
      dest: "{{ playbook_dir }}/.tmp/setup.sh"
      mode: "+x"

  - name: Generate Postfix accounts (requires sudo, use --ask-become-pass, make sure Docker Daemon is running)
    command:
      cmd: "{{ playbook_dir }}/.tmp/setup.sh email add {{ item.name }}@{{ secrets_domain }} {{ item.password }}"
    with_items: "{{ secrets_app_config.mailserver.accounts }}"
    become: yes
    # no_log: true
    when: not postfix_stat_result.stat.exists

  - name: Generate DKIM key and DNS entries
    command:
      cmd: "{{ playbook_dir }}/.tmp/setup.sh config dkim domain {{ secrets_domain }}"
    environment:
      NAME: ""
    become: yes
    when: not dkim_stat_result.stat.exists

  - name: Make files readable
    file:
      path: "{{ playbook_dir }}/.tmp"
      state: directory
      mode: o+r
      recurse: yes
    become: yes

  - name: Copy files to secrets dir
    copy:
      src: "{{ playbook_dir }}/.tmp/docker-data/dms/config/{{ item.src }}"
      dest: "{{ secrets_secrets_dir }}/{{ item.dest }}"
      remote_src: yes
    with_items:
      - src: "postfix-accounts.cf"
        dest: "postfix-accounts.{{ secrets_stage }}.cf"
        cond: "{{ not postfix_stat_result.stat.exists }}"
      - src: "opendkim/keys/{{ secrets_domain }}/mail.private"
        dest: "mail.{{ secrets_stage }}.private"
        cond: "{{ not dkim_stat_result.stat.exists }}"
      - src: "opendkim/keys/{{ secrets_domain }}/mail.txt"
        dest: "mail.{{ secrets_stage }}.txt"
        cond: "{{ not dkim_stat_result.stat.exists }}"
    when: item.cond

  - name: Delete temporary mail config directory
    file:
      path: "{{ playbook_dir }}/.tmp"
      state: absent
    become: yes

  - name: Remind to encrypt the created files.
    debug:
      msg: "New mailserver config files created. Make sure to encrypt them using ansible-vault and store them in the vault directory."

  when: not postfix_stat_result.stat.exists or not dkim_stat_result.stat.exists
